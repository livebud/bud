package program

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func Run(ctx context.Context, args ...string) int {
	if err := runProgram(ctx, args...); err != nil {
		if errors.Is(err, context.Canceled) {
			// Unfortunately interrupts like SIGINT trigger a non-zero exit code,
			// regardless of whether you do os.Exit(0) or not. We're going to use exit
			// code 3 to distinguish between non-zero exit codes so "bud run" can know
			// that we exited cleanly on an interrupt.
			return 3
		}
		console.Error(err.Error())
		return 1
	}
	return 0
}

func runProgram(ctx context.Context, args ...string) error {
	program, err := Load(ctx)
	if err != nil {
		return err
	}
	return program.Run(ctx, args...)
}

func Load(ctx context.Context) (*Program, error) {
	{{- with $gomod := $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}
	{{ $gomod }}, err := gomod.Find(".")
	if err != nil {
		return nil, err
	}
	{{- end }}
	cli, err := {{ $.Provider.Name }}(
		{{- with $gomod := $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}{{ $gomod }},{{ end }}
	)
	if err != nil {
		return nil, err
	}
	return &Program{cli}, nil
}

type Program struct {
	cli *command.CLI
}

func (p *Program) Run(ctx context.Context, args ...string) error {
	return p.cli.Parse(ctx, args...)
}

{{ $.Provider.Function }}