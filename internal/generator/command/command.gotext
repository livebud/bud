package command

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func New(
	module *gomod.Module,
	runCmd *run.Command,
	buildCmd *build.Command,
	newControllerCmd *new_controller.Command,
) *CLI {
	return &CLI{
		module,
		runCmd,
		buildCmd,
		newControllerCmd,
	}
}

type CLI struct {
	module *gomod.Module
	runCmd *run.Command
	buildCmd *build.Command
	newControllerCmd *new_controller.Command
}

func (c *CLI) Parse(ctx context.Context, args ...string) error {
	cli := commander.New("cli").Writer(os.Stdout)

	{ // cli run
		cli := cli.Command("run", "run command")
		cli.Flag("embed", "embed assets").Bool(&c.runCmd.Flag.Embed).Default(false)
		cli.Flag("hot", "hot reloading").String(&c.runCmd.Flag.Hot).Default(":35729")
		cli.Flag("minify", "minify assets").Bool(&c.runCmd.Flag.Minify).Default(false)
		cli.Flag("listen", "address to listen to").String(&c.runCmd.Listen).Default(":3000")
		cli.Run(c.beforeRun(c.runCmd))
	}

	{ // cli build
		cli := cli.Command("build", "build command")
		cli.Flag("embed", "embed assets").Bool(&c.buildCmd.Flag.Embed).Default(true)
		cli.Flag("hot", "hot reloading").String(&c.buildCmd.Flag.Hot).Default("false")
		cli.Flag("minify", "minify assets").Bool(&c.buildCmd.Flag.Minify).Default(true)
		cli.Run(c.beforeBuild(c.buildCmd))
	}

	{ // cli new <scaffold>
		cli := cli.Command("new", "new scaffold")

		{ // cli new resource <path> [actions...]
			cli := cli.Command("controller", "new controller")
			cli.Arg("path").String(&c.newControllerCmd.Path)
			cli.Args("actions").Strings(&c.newControllerCmd.Actions)
			cli.Run(c.newControllerCmd.Run)
		}
	}

	return cli.Parse(ctx, args)
}

// Before run loads and attaches the generators before running.
func (c *CLI) beforeRun(cmd *run.Command) (func(ctx context.Context) error) {
	return func(ctx context.Context) (err error) {
		// Attach the generators
		cmd.FS, err = {{ $.Provider.Name }}(cmd.Flag, ctx, c.module)
		if err != nil {
			return err
		}
		return cmd.Run(ctx)
	}
}

// beforeBuilds loads and attaches the generators before building.
func (c *CLI) beforeBuild(cmd *build.Command) (func(ctx context.Context) error) {
	return func(ctx context.Context) (err error) {
		// Attach the generators
		cmd.FS, err = {{ $.Provider.Name }}(cmd.Flag, ctx, c.module)
		if err != nil {
			return err
		}
		return cmd.Run(ctx)
	}
}

{{ $.Provider.Function }}