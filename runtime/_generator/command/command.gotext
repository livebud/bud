package command

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

// Load the CLI
// TODO: remove unused arguments. We currently need them because di will
// remove these parameters if they're unused, breaking the signature. This
// should be fixed in di.
func Load(m *Map) *CLI {
	return &CLI{m}
}

type CLI struct {
	m *Map
}

{{- define "command" }}
{{- range $flag := $.Flags }}
cmd.Flag(`{{ $flag.Slug }}`, `{{ $flag.Help }}`).{{ $flag.Method }}(&c.m.{{ $.Full.Pascal }}Command.{{ $flag.Pascal }}){{ if $flag.Default }}.Default({{ $flag.Default }}){{ end }}
{{- end }}
{{- range $arg := $.Args }}
cmd.Arg(`{{ $arg.Slug }}`).{{ $arg.Method }}(&c.m.{{ $.Full.Pascal }}Command.{{ $arg.Pascal }})
{{- end }}
{{- if $.Runnable }}
cmd.Run(c.m.{{ $.Full.Pascal }}Command.Run)
{{ end }}
{{- range $sub := $.Subs }}

{ // $ {{ $.Name }} {{ $sub.Name }}
	cmd := cmd.Command(`{{ $sub.Name }}`, `{{ $sub.Help}}`)
	{{- template "command" $sub }}
}
{{- end }}
{{- end }}

func (c *CLI) Parse(ctx context.Context, args ...string) error {
	// $ bud run/build
	cmd := commander.New(`{{ $.Command.Slug }}`)
	{{- template "command" $.Command }}

	return cmd.Parse(ctx, args)
}

// Map contains all of the commands
type Map struct {
	{{- if $.Command.Runnable }}Command *Command{{- end }}
	{{- range $cmd := $.Commands }}
	{{ $cmd.Full.Pascal }}Command *{{ $cmd.Full.Pascal }}Command
	{{- end }}
}

{{- if $.Command.Runnable }}
// LoadCommand loads the root command
func LoadCommand(web *web.Server) *Command {
	return &Command{web}
}

// Command is the root command
type Command struct {
	web *web.Server
}

// Run starts the web server
func (c *Command) Run(ctx context.Context) error {
	return c.web.Serve(ctx, os.Getenv("PORT"))
}
{{- end }}

{{- range $cmd := $.Commands }}

// Load{{ $cmd.Full.Pascal }}Command loads the command
func Load{{ $cmd.Full.Pascal }}Command(
{{- range $dep := $cmd.Deps }}
{{ $dep.Camel }} {{ $dep.Type }},
{{- end }}
) *{{ $cmd.Full.Pascal }}Command {
	return &{{ $cmd.Full.Pascal }}Command{
		{{- range $dep := $cmd.Deps }}
		{{ $dep.Name }}: {{ $dep.Camel }},
		{{- end }}
	}
}

{{- if $cmd.Import }}

// {{ $cmd.Full.Pascal }}Command is an alias to `{{ $cmd.Import.Path }}`
type {{ $cmd.Full.Pascal }}Command = {{ $cmd.Import.Name }}.Command
{{- end }}

{{- end }}
