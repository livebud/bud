package main

// GENERATED BY BUD. DO NOT EDIT.

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

// main entrypoint
func main() {
	ctx := context.Background()
	if err := run(ctx); err != nil {
		if errors.Is(err, context.Canceled) {
			return
		}
		console.Error(err.Error())
		os.Exit(1)
	}
}

func run(ctx context.Context) error {
	cmd := new(Command)
	cli := commander.New("appfs")
	cli.Flag("chdir", "change the working directory").Short('C').String(&cmd.Dir).Default(".")
	cli.Flag("embed", "embed assets").Bool(&cmd.Flag.Embed).Default(false)
	cli.Flag("hot", "hot reloading").Bool(&cmd.Flag.Hot).Default(true)
	cli.Flag("minify", "minify assets").Bool(&cmd.Flag.Minify).Default(false)
	cli.Flag("listen", "address to serve from").String(&cmd.Listen).Default(":65000")
	cli.Flag("log", "filter logs with this pattern").Short('L').String(&cmd.Log).Default("info")
	cli.Run(cmd.Serve)
	return cli.Parse(ctx, os.Args[1:])
}

type Command struct {
	Dir    string
	Flag   framework.Flag
	Listen string
	Log    string
}


// Serve the filesystem
func (c *Command) Serve(ctx context.Context) (err error) {
	module, err := gomod.Find(c.Dir)
	if err != nil {
		return err
	}
	log, err := appfsrt.Logger(c.Log)
	if err != nil {
		return err
	}
	bfs := budfs.New(module, log)
	parser := parser.New(bfs, module)
	injector := di.New(bfs, log, module, parser)
	_ = injector
	fsys, err := {{ $.Provider.Name }}(
		{{- /* Order matters. Ordered by package name (e.g. budfs.*FileSystem > context.Context) */}}
		{{- if $.Provider.Variable "github.com/livebud/bud/package/budfs.*FileSystem" }}bfs,{{ end }}
		{{- if $.Provider.Variable "context.Context" }}ctx,{{ end }}
		{{- if $.Provider.Variable "github.com/livebud/bud/package/di.*Injector" }}injector,{{ end }}
		{{- if $.Provider.Variable "github.com/livebud/bud/framework.*Flag" }}&c.Flag,{{ end }}
		{{- if $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}module,{{ end }}
		{{- if $.Provider.Variable "github.com/livebud/bud/package/log.Log" }}log,{{ end }}
		{{- if $.Provider.Variable "github.com/livebud/bud/package/parser.*Parser" }}parser,{{ end }}
	)
	if err != nil {
		return err
	}
	return appfsrt.Serve(ctx, log, fsys, c.Listen)
}

// {{ $.Provider.Name }} provides the generator filesystem
{{ $.Provider.Function }}