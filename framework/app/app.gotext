package main

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func main() {
	exitCode := run(context.Background(), os.Args[1:]...)
	os.Exit(exitCode)
}

// Run the cli
func run(ctx context.Context, args ...string) int {
	if err := parse(ctx, args...); err != nil {
		if errors.Is(err, context.Canceled) {
			return 0
		}
		console.Error(err.Error())
		return 1
	}
	return 0
}

// parse the arguments and run the program
func parse(ctx context.Context, args ...string) error {
	{{- if $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}
	// Load the module dependency
	{{- if $.Flag.Embed }}
	module, err := gomod.Parse("go.mod", []byte("module e"))
	if err != nil {
		return err
	}
	{{- else }}
	module, err := gomod.Find(".")
	if err != nil {
		return err
	}
	{{- end }}
	{{- end }}
	// Load the web server
	cli, err := {{ $.Provider.Name }}(
		{{/* Order matters. Ordered by package name (e.g. budhttp > context) */}}
		{{/* {{- if $.Provider.Variable "github.com/livebud/bud/package/budhttp.Client" }}budClient,{{ end }} */}}
		{{- if $.Provider.Variable "context.Context" }}ctx,{{ end }}
		{{- if $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}module,{{ end }}
		{{/* {{- if $.Provider.Variable "github.com/livebud/bud/package/log.Interface" }}log,{{ end }} */}}
	)
	if err != nil {
		{{/* budClient.Publish("app:error", []byte(err.Error())) */}}
		return err
	}
	// Inform bud that we're ready
	{{/* budClient.Publish("app:ready", nil) */}}
	return cli.Parse(ctx, args...)
}

// {{ $.Provider.Name }} is provided with dependency injection.
{{ $.Provider.Function }}
