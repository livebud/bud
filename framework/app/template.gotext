package main

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func main() {
	os.Exit(run(context.Background(), os.Args[1:]...))
}

// Run the cli
func run(ctx context.Context, args ...string) int {
	if err := parse(ctx, args...); err != nil {
		if errors.Is(err, context.Canceled) {
			return 0
		}
		console.Error(err.Error())
		return 1
	}
	return 0
}

// Parse the arguments
func parse(ctx context.Context, args ...string) error {
	cli := commander.New("bud")
	app := new(App)
	cli.Flag("listen", "address to listen to").String(&app.Listen).Default(":3000")
	cli.Run(app.Run)
	return cli.Parse(ctx, args)
}

// App command
type App struct {
	Listen string
}

func (a *App) Run(ctx context.Context) error {
	{{- with $module := $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}
	// Load the module dependency
	{{ $module }}, err := gomod.Find(".")
	if err != nil {
		return err
	}
	{{- end }}
	// Load the web server
	webServer, err := loadWeb(
		{{- if $.Provider.Variable "context.Context" }}ctx,{{ end }}
		{{- with $module := $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}{{ $module }},{{ end }}
	)
	if err != nil {
		return err
	}
	// Start serving requests
	return webServer.Serve(ctx, a.Listen)
}

{{/*
	// Load the dependencies
	{{- with $module := $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}
	{{ $module }}, err := gomod.Find(".")
	if err != nil {
		return nil, err
	}
	{{- end }}
	// Load the web server
	webServer, err := loadWeb(
		{{- if $.Provider.Variable "context.Context" }}ctx,{{ end }}
		{{- with $module := $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}{{ $module }},{{ end }}
	)
	if err != nil {
		return err
	}
	// Start serving requests!

	return webServer.Serve(ctx, "{{ $.Listen }}")
}

func Load(ctx context.Context) (*Program, error) {
	{{- with $module := $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}
	{{ $module }}, err := gomod.Find(".")
	if err != nil {
		return nil, err
	}
	{{- end }}
	cli, err := {{ $.Provider.Name }}(
		{{- if $.Provider.Variable "context.Context" }}ctx,{{ end }}
		{{- with $module := $.Provider.Variable "github.com/livebud/bud/package/gomod.*Module" }}{{ $module }},{{ end }}
	)
	if err != nil {
		return nil, err
	}
	return &Program{cli}, nil
}

type Program struct {
	cli *command.CLI
}

func (p *Program) Run(ctx context.Context, args ...string) error {
	return p.cli.Parse(ctx, args...)
} */}}

{{ $.Provider.Function }}