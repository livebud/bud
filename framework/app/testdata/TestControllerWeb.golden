-- state.json --
{
  "Imports": [
    {
      "name": "controller",
      "path": "app.com/bud/internal/app/controller"
    },
    {
      "name": "web",
      "path": "app.com/bud/internal/app/web"
    },
    {
      "name": "context",
      "path": "context"
    },
    {
      "name": "commander",
      "path": "github.com/livebud/bud/package/commander"
    },
    {
      "name": "console",
      "path": "github.com/livebud/bud/package/log/console"
    },
    {
      "name": "router",
      "path": "github.com/livebud/bud/package/router"
    },
    {
      "name": "os",
      "path": "os"
    }
  ],
  "Provider": {
    "Name": "loadWeb",
    "Target": "app.com/bud/program",
    "Imports": [
      {
        "name": "controller",
        "path": "app.com/bud/internal/app/controller"
      },
      {
        "name": "web",
        "path": "app.com/bud/internal/app/web"
      },
      {
        "name": "router",
        "path": "github.com/livebud/bud/package/router"
      }
    ],
    "Externals": null,
    "Code": "routerRouter := router.New()\ncontrollerIndexAction := \u0026controller.IndexAction{}\ncontrollerController := \u0026controller.Controller{Index: controllerIndexAction}\nwebServer := web.New(routerRouter, controllerController)\n",
    "Results": [
      {
        "Import": "app.com/bud/internal/app/web",
        "Type": "*web.Server",
        "Name": "webServer",
        "Kind": 2
      },
      {
        "Import": "",
        "Type": "error",
        "Name": "nil",
        "Kind": 3
      }
    ]
  }
}
-- code.txt --
package main

import (
	controller "app.com/bud/internal/app/controller"
	web "app.com/bud/internal/app/web"
	context "context"
	commander "github.com/livebud/bud/package/commander"
	console "github.com/livebud/bud/package/log/console"
	router "github.com/livebud/bud/package/router"
	os "os"
)

func main() {
	os.Exit(run(context.Background(), os.Args[1:]...))
}

// Run the cli
func run(ctx context.Context, args ...string) int {
	if err := parse(ctx, args...); err != nil {
		console.Error(err.Error())
		return 1
	}
	return 0
}

// Parse the arguments
func parse(ctx context.Context, args ...string) error {
	cli := commander.New("bud")
	app := new(App)
	cli.Flag("listen", "address to listen to").String(&app.Listen).Default(":3000")
	cli.Run(app.Run)
	return cli.Parse(ctx, args)
}

// App command
type App struct {
	Listen string
}

func (a *App) Run(ctx context.Context) error {
	// Load the web server
	webServer, err := loadWeb()
	if err != nil {
		return err
	}
	// Start serving requests
	return webServer.Serve(ctx, a.Listen)
}

func loadWeb() (*web.Server, error) {
	routerRouter := router.New()
	controllerIndexAction := &controller.IndexAction{}
	controllerController := &controller.Controller{Index: controllerIndexAction}
	webServer := web.New(routerRouter, controllerController)
	return webServer, nil
}
