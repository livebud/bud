package transform

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

// Load the transformer
func Load(
	log log.Log,
	{{- range $transformer := $.Transformers }}
	{{ $transformer.Camel }} *{{ $transformer.Import.Name }}.Transform,
	{{- end }}
) *Generator {
	transformer := transformrt.Load(
		log,
		{{- range $transformer := $.Transformers }}
		{{- range $transform := $transformer.Transforms }}
		&transformrt.Transform{
			Import: "{{ $transformer.Import.Path }}",
			From: "{{ $transform.From }}",
			To: "{{ $transform.To }}",
			Func: {{ $transformer.Camel }}.{{ $transform.Name }},
		},
		{{- end }}
		{{- end }}
	)
	return &Generator{
		transformer,
	}
}

type Generator struct {
	transformer *transformrt.Transformer
}

func (g *Generator) Register(dir *budfs.Dir) {
	dir.ServeFile(`bud/service/transform`, func(fsys budfs.FS, file *budfs.File) error {
		code, err := g.transformer.Transform(fsys, file.Relative())
		if err != nil {
			return fmt.Errorf("generator/transform: unable to transform %q. %w", file.Relative(), err)
		}
		file.Data = code
		return nil
	})
}