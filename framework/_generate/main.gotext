package main

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func main() {
	if err := run(); err != nil {
		console.Error(err.Error())
		os.Exit(1)
	}
	os.Exit(0)
}

func run() error {
	conn, err := goplugin.Serve("Generate")
	if err != nil {
		return err
	}
	generator := &Generator{
		&{{ $generator.ImportName }}.Generator{}
	}
	server := rpc.NewServer()
	server.Register(generator.Tailwind)
	{{/* {{- range $generator := $.Generators }}
	{{- end }} */}}
	server.ServeConn(conn)
	return nil
}

type Generator struct {
	{{- range $generator := $.Generators }}
	{{ $generator.Pascal }} *{{ $generator.ImportName }}.Generator
	{{- end }}
}

func (g *TailwindGenerator) Generate(ctx context.Context, fsys fs.FS, dir *overlay.Dir) error {
	{{- range $generator := $.Generators }}
	dir.GenerateDir(`{{ $generator.Path }}`, g.{{ $generator.Pascal }}.Generate)
	{{- end }}
	return nil
}
