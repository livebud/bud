package web

// Code generated by bud; DO NOT EDIT.

import (
	context "context"
	errors "errors"
	web "github.com/livebud/bud/example/zero/web"
	middleware "github.com/livebud/bud/package/middleware"
	router "github.com/livebud/bud/package/router"
	socket "github.com/livebud/bud/package/socket"
	errgroup "golang.org/x/sync/errgroup"
	net "net"
	http "net/http"
)

func New(web *web.Web) *Server {
	middleware := web.Stack(middleware.Stack{})
	router := web.Router(router.New())
	handler := web.Handler(middleware.Middleware(router))
	server := web.Server(&http.Server{
		Handler: handler,
	})
	return &Server{server}
}

type Server struct {
	server *http.Server
}

func (s *Server) Listen(ctx context.Context, addr string) error {
	ln, err := socket.Listen(addr)
	if err != nil {
		return err
	}
	defer ln.Close()
	return s.Serve(ctx, ln)
}

func (s *Server) Serve(ctx context.Context, ln net.Listener) error {
	eg := new(errgroup.Group)
	eg.Go(func() error {
		return s.server.Serve(ln)
	})
	eg.Go(func() error {
		<-ctx.Done()
		// TODO: wait for another ctrl+c to force quit
		return s.server.Shutdown(context.Background())
	})
	if err := eg.Wait(); err != nil && !errors.Is(err, http.ErrServerClosed) {
		return err
	}
	return nil
}
