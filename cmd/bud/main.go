package main

import (
	"context"
	"errors"
	"os"

	"github.com/livebud/bud/framework"
	cli3 "github.com/livebud/bud/internal/cli3"
	custom "github.com/livebud/bud/internal/cli3/custom"
	generate "github.com/livebud/bud/internal/cli3/generate"
	run "github.com/livebud/bud/internal/cli3/run"
	"github.com/livebud/bud/internal/dag"
	"github.com/livebud/bud/internal/pubsub"
	"github.com/livebud/bud/package/budhttp/budsvr"
	config "github.com/livebud/bud/package/config"
	gomod "github.com/livebud/bud/package/gomod"
	v8 "github.com/livebud/bud/package/js/v8"
	"github.com/livebud/bud/package/log/console"
)

//go:generate go run ../../scripts/set-package-json/main.go

// main is bud's entrypoint
func main() {
	ctx := context.Background()
	if err := runCLI(ctx); err != nil {
		console.Error(err.Error())
		os.Exit(1)
	}
	os.Exit(0)
}

// Run the CLI with the default configuration and return any resulting errors.
func runCLI(ctx context.Context) error {
	// Initialize the CLI
	cli, err := loadCLI()
	if err != nil {
		return err
	}
	// Run the cli
	if err := cli.Parse(ctx, os.Args[1:]...); err != nil {
		if errors.Is(err, context.Canceled) {
			return nil
		}
		return err
	}
	return nil
}

// Generated by DI
// go run package/di/cmd/main.go -d="internal/cli3.*CLI" -t="cmd/bud"  --name=loadCLI  --map="package/log.Log:package/log/console.Log" --map="internal/pubsub.Client:internal/pubsub.*Memory" --map="package/js.VM:package/js/v8.*VM"
func loadCLI() (*cli3.CLI, error) {
	configConfig := config.Default()
	consoleLog, err := console.From(configConfig)
	if err != nil {
		return nil, err
	}
	gomodModule, err := gomod.From(configConfig)
	if err != nil {
		return nil, err
	}
	dagDB, err := dag.From(consoleLog, gomodModule)
	if err != nil {
		return nil, err
	}
	pubsubMemory := pubsub.New()
	frameworkFlag := framework.From(configConfig)
	jsVM, err := v8.Load()
	if err != nil {
		return nil, err
	}
	budsvrServer2 := budsvr.New2(pubsubMemory, frameworkFlag, consoleLog, jsVM)
	generateCommand := generate.New(dagDB, budsvrServer2, consoleLog, gomodModule)
	customCommand := custom.New(generateCommand)
	runCommand := run.New(configConfig, generateCommand)
	cli3CLI := cli3.New(configConfig, customCommand, generateCommand, runCommand)
	return cli3CLI, err
}
